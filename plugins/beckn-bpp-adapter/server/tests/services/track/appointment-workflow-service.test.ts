import { it, expect, describe, jest } from "@jest/globals";
import { Strapi } from '@strapi/strapi';
import appointmentWorkflowService from "../../../services/status/appointment-workflow-service";
import { PLUGIN } from "../../../constants";
// Generated by CodiumAI

describe('default', () => {

    // The function should return a Promise.
    it('should return a Promise when invoked', () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
      const obj = {
        message: 'test message',
        context: 'test context',
      };
      const trackService = {
        track: jest.fn(),
      };
      const pluginMock = {
        service: jest.fn().mockReturnValue(trackService),
      };
      strapi.plugin.mockReturnValue(pluginMock);

      const result = appointmentWorkflowService({ strapi: strapi as any }).index(obj);

      expect(result).toBeInstanceOf(Promise);
    });

    // The 'strapi' argument should be an object with the 'plugin' method.
    it('should have \'strapi\' argument with \'plugin\' method', () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
      const obj = {
        message: 'test message',
        context: 'test context',
      };
      const trackService = {
        track: jest.fn(),
      };
      const pluginMock = {
        service: jest.fn().mockReturnValue(trackService),
      };
      strapi.plugin.mockReturnValue(pluginMock);

      appointmentWorkflowService({ strapi: strapi as any }).index(obj);

      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
    });

 

    // The 'message' property of the 'obj' argument should be a string.
    it('should return an error when the \'message\' property is not a string', () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
      const obj = {
        message: 123,
        context: 'test context',
      };
      const trackService = {
        track: jest.fn(),
      };
      const pluginMock = {
        service: jest.fn().mockReturnValue(trackService),
      };
      strapi.plugin.mockReturnValue(pluginMock);

      expect(() => appointmentWorkflowService({ strapi: strapi as any }).index(obj)).toThrow('The \'message\' property must be a string');
    });

    // The 'obj' argument should be an object with 'message' and 'context' properties.
    it('should return a Promise when invoked', () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
      const obj = {
        message: 'test message',
        context: 'test context',
      };
      const trackService = {
        track: jest.fn(),
      };
      const pluginMock = {
        service: jest.fn().mockReturnValue(trackService),
      };
      strapi.plugin.mockReturnValue(pluginMock);

      const result = appointmentWorkflowService({ strapi: strapi as any }).index(obj);

      expect(result).toBeInstanceOf(Promise);
    });

    // The 'PLUGIN' constant should be a string.
    it('should return a Promise when invoked', () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
      const obj = {
        message: 'test message',
        context: 'test context',
      };
      const trackService = {
        track: jest.fn(),
      };
      const pluginMock = {
        service: jest.fn().mockReturnValue(trackService),
      };
      strapi.plugin.mockReturnValue(pluginMock);

      const result = appointmentWorkflowService({ strapi: strapi as any}).index(obj);

      expect(result).toBeInstanceOf(Promise);
    });
});


   
   