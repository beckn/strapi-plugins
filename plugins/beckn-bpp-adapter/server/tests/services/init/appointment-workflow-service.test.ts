import { it, expect, describe, jest } from "@jest/globals";
import { Strapi } from '@strapi/strapi';
import appointmentWorkflowService from "../../../services/init/appointment-workflow-service";
import { PLUGIN } from "../../../constants";
// Generated by CodiumAI

describe('default', () => {

    // Should return an array of objects with billing and fulfillments properties when given valid input
    it('should return an array of objects with billing and fulfillments properties when given valid input', async () => {
        // Mock dependencies
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            })
        };
        const obj = {
            message: {
                order: {
                    items: [
                        {
                            id: "1",
                            descriptor: {
                                name: "item1",
                                code: "code1"
                            }
                        },
                        {
                            id: "2",
                            descriptor: {
                                name: "item2",
                                code: "code2"
                            }
                        }
                    ],
                    provider: {
                        id: "1",
                        descriptor: {
                            name: "provider1"
                        }
                    }
                }
            },
            context: {
                domain: "example.com"
            }
        };
        // Invoke function
        const defaultFunction = appointmentWorkflowService(({ strapi: strapi as any }))
        const result = await defaultFunction.index(obj);

        // Assertions
        expect(result).toEqual([]);
        expect(strapi.entityService.findMany).toHaveBeenCalledWith('api::provider.provider', {
            filters: {"id":"1","provider_name":{"$contains":"provider1"},"domain_id":{"DomainName":"example.com"},"items":{"id":{"$in":["1","2"]}}},
            populate: {"category_ids":{},"location_id":{},"fulfillments":{},"payment_methods":{},"items":{"populate":{"cat_attr_tag_relations":{"filters":{"taxanomy":{"$in":["TAG","CATEGORY"]}}},"image":{},"item_fulfillment_id":{"populate":{"fulfilment_id":{"populate":{"agent_ids":{}}},"location_id":{}}},"item_meta_id":{"populate":{"fulfilment_id":{},"location_id":{}}},"service":{},"sc_retail_product":{"populate":{"price_bareakup_ids":{},"product_cancel":{"populate":{"cancel_term_id":{}}}}}},"filters":{"id":{"$in":["1","2"]}}}}
        });
    });

    // Should return an empty array when no items are present in the input
    it('should return an empty array when no items are present in the input', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            })
        };
        const obj = {
            message: {
                order: {
                  
                    provider: {
                        id: "1",
                        descriptor: {
                            name: "provider1"
                        }
                    }
                }
            },
            context: {
                domain: "example.com"
            }
        };
        // Invoke function
        const defaultFunction = appointmentWorkflowService(({ strapi: strapi as any }))
        const result = await defaultFunction.index(obj);

       

        expect(result).toEqual([]);
     
        expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
        
      
    });
    // Should return an empty array when no message is present in the input
    it('should return an empty array when no message is present in the input', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            })
        };
        const obj = {
            message: {
                order: {
                    items: [
                        {
                            id: "1",
                            descriptor: {
                                name: "item1",
                                code: "code1"
                            }
                        },
                        {
                            id: "2",
                            descriptor: {
                                name: "item2",
                                code: "code2"
                            }
                        }
                    ],
                    provider: {
                        id: "1",
                        descriptor: {
                            name: "provider1"
                        }
                    }
                }
            },
            context: {
                domain: "example.com"
            }
        };
        // Invoke function
        const defaultFunction = appointmentWorkflowService(({ strapi: strapi as any }))
        const result = await defaultFunction.index(obj);

        expect(result).toEqual([]);
        
        
    });
    // // Should return an empty array when no context is present in the input
    it('should return an empty array when no context is present in the input', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            })
        };
        const obj = {
            message: {
                order: {
                    items: [
                        {
                            id: "1",
                            descriptor: {
                                name: "item1",
                                code: "code1"
                            }
                        },
                        {
                            id: "2",
                            descriptor: {
                                name: "item2",
                                code: "code2"
                            }
                        }
                    ],
                    provider: {
                        id: "1",
                        descriptor: {
                            name: "provider1"
                        }
                    }
                }
            },
            context: {
                domain: "example.com"
            }
        };
        // Invoke function
        const defaultFunction = appointmentWorkflowService(({ strapi: strapi as any }))
        const result = await defaultFunction.index(obj);

        expect(result).toEqual([]);
       
    });
    // // Should return an empty array when no provider is present in the input
    it('should return an empty array when no provider is present in the input', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            })
        };
        const obj = {
            message: {
                order: {
                    items: [
                        {
                            id: "1",
                            descriptor: {
                                name: "item1",
                                code: "code1"
                            }
                        },
                        {
                            id: "2",
                            descriptor: {
                                name: "item2",
                                code: "code2"
                            }
                        }
                    ],
                    provider: {
                        id: "1",
                        descriptor: {
                            name: "provider1"
                        }
                    }
                }
            },
            context: {
                domain: "example.com"
            }
        };
        // Invoke function
        const defaultFunction = appointmentWorkflowService(({ strapi: strapi as any }))
        const result = await defaultFunction.index(obj);

        expect(result).toEqual([]);
    
        expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
       
    });
});
