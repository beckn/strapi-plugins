import { it, expect, describe, jest } from "@jest/globals";
import { Strapi } from '@strapi/strapi';
import commerceWorkflowService from "../../../services/status/commerce-workflow-service";
import { PLUGIN } from "../../../constants";

// Generated by CodiumAI

describe('default', () => {

    // The function should correctly call the rating service with the message and context provided in the input object.
    it('should call rating service with message and context', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
     
      const result = await commerceWorkflowService({ strapi: strapi as any }).index({ message: { order_id: 'valid_order_id' }, context: { domain: 'domain' } });
      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
 
      expect(result).toBe('success');
    });

    // The function should throw an error if the rating service call fails.
    it('should throw an error if rating service call fails', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
     
      const result = await commerceWorkflowService({ strapi: strapi as any }).index({ message: { order_id: 'valid_order_id' }, context: { domain: 'domain' } });
      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
 
      expect(result).toBe('success');
    });

    // The function should handle valid input objects without throwing errors.
    it('should call rating service with message and context', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
     
      const result = await commerceWorkflowService({ strapi: strapi as any }).index({ message: { order_id: 'valid_order_id' }, context: { domain: 'domain' } });
      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
 
      expect(result).toBe('success');
    });

    // The function should return the result of the rating service call.
    it('should call rating service with message and context', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
     
      const result = await commerceWorkflowService({ strapi: strapi as any }).index({ message: { order_id: 'valid_order_id' }, context: { domain: 'domain' } });
      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
 
      expect(result).toBe('success');
    });

    // The function should handle empty message and context fields without throwing errors.
    it('should handle empty message and context fields without throwing errors', async () => {
        const strapi = {
            entityService: {
                findMany: jest.fn<() => Promise<any[]>>().mockResolvedValue([])
                // findMany: jest.fn().mockResolvedValue([])
            },
            plugin: jest.fn().mockReturnValue({
                service: jest.fn().mockReturnValue({
                    getCategoryById: jest.fn(),
                    getTagById: jest.fn()
                })
            }),
            eventHub: {
              emit: jest.fn()
            }
        };
     
      const result = await commerceWorkflowService({ strapi: strapi as any }).index({ message: { order_id: 'valid_order_id' }, context: { domain: 'domain' } });
      expect(strapi.plugin).toHaveBeenCalledWith(PLUGIN);
 
      expect(result).toBe('success');
    })
    
  
});
